/*! \page firstp Getting started

\section download Download latest source tarball
See download section of http://www.qmcpack.org  
<!--
\section download Download source via svn

- Developers' version: 
\code
svn co https://subversion.assembla.com/svn/qmcdev/trunk qmcpack
\endcode
- Stable public version : 
\code
svn co http://qmcpack.googlecode.com/svn/trunk/ qmcpack
\endcode
-->

See below for details of
- [Required libraries and tools](@ref pre_sec)
- [Using external libraries](@ref extlib_sec)
- [How to do a quick install and build variants](@ref quickly)
- [Installing QMCPACK on Ubuntu 14 Linux](@ref ubuntubuild)
- [Installing QMCPACK on CentOS 7 Linux](@ref centosbuild)
- [Installing QMCPACK on Mac OS X 10.9 Mavericks and 10.10 Yosemite using Macports](@ref macbuild)

\section pre_sec Required tools and libraries

- C/C++ compilers
- cmake, build utility, http://www.cmake.org/
- blas/lapack, numerical library, use platform-optimized libraries
- libxml2, XML parser, http://xmlsoft.org/
- hdf5, portable I/O library, http://www.hdfgroup.org/HDF5/
- boost, peer-reviewed portable C++ source libraries, http://www.boost.org
- fftw, FFT library, http://www.fftw.org/  

Einspline is distributed within QMCPACK and does not need to be separately installed. For reference, the official
URL for the standalone einspline library is http://einspline.sourceforge.net/

\warning Presence of the standalone einspline library in e.g. /usr/local can result in build errors in einspline related parts of QMCPACK due to conflicts between internal and external header files. If this happens, remove the standalone einspline library include files and library archive.

\section extlib_sec External libraries
QMCPACK uses several third-party tools and libraries. The selected packages are
widely adopted by open-source communities and are generally available on HPC
systems via module. They are included in standard Linux/cygwin distributions or
can be installed by standard tools like yum. Installing these libraries with
the source codes is straightforward. Because the header files are included by
QMCPACK, it is important to install developers’ version of each library.  If
these libraries are installed in standard directories, /usr /usr/local and /sw
(Mac), no action is necessary. 

Alternatively, environment variables XYZ_HOME should be set. Here, XYZ stands
for the name of package; the build utility can locate the libraries and use
them. With few exceptions, the build utility cmake will look for
<c>XYZ_HOME/include</c> for the header files and <c>XYZ_HOME/lib</c> for the library files.
When multiple environment variables apply to a library, e.g., blas/lapack, the
library is searched according to the listed order. 


Name       | Environment variables                      | Comments
---------- | ------------------------------------------ | ----------------------------------
blas/lapack|<c>MKL_HOME</c>, <c>LAPACK</c>, <c>ATLAS</c>| Alternatives: vendor-provided blas, e.g., ESSL
hdf5       |<c>HDF5_HOME</c>, <c>HDF_HOME</c>           | phdf5 is not necessary
libxml2    |<c>LIBXML2_HOME</c>                            | Configure with <c>--disable-shared --enable-static --without-python --without-http --without-ftp</c>
boost      |<c>BOOST_HOME</c>                           | Using only the header files. No need to compile the library.  Simply download and unpack the package, if not installed on the system.
fftw       |<c>FFTW_HOME</c>                            | double precision only


\section quickly Installing on generic UNIX, "quick install", and build variants

@note We assume that you are working in the qmcpack directory.

When everything is installed in standard directores, <c>/usr</c>, <c>/usr/local</c> with default compilers
\code
cd build
cmake ..
cmake ..
make -j8
\endcode
This will create a binary with <b>real trial wavefunctions</b>.  Use as many threads as you can with <c>make</c> In the example, 8 threads are used.

On LINUX, GNU compilers are the default.
<!--  More on how to build QMCPACK can be
found at http://qmcpack.cmscc.org/getting-started/cmake-101 
--!>
If everything goes
well, then you should see \a qmcpack/build/bin/qmcapp. Examples for several common UNIX-like systems are given below.

In addition, one has to build a binary with <b>complex trial wavefunctions</b>.
\code
mkdir build_complex
cd build_complex
cmake -DQMC_COMPLEX=1 ..
make -j8
\endcode

To build CUDA version, 
\code
mkdir build_cuda
cd build_cuda
cmake -DQMC_CUDA=1 ..
make -j8
\endcode

<!--
<c>qmcpack (topdir)</c> has
- CMakeLists.txt  : main cmake configuration file
- CMake  : customized cmake modules for QMCPACK
- config  : cmake toolchain files for target systems
- docs  : documentation-related materials
- utils  : utility scripts (python, perl, shell scripts)
- build  : empty diretory for a build
- src  : source directory
  - CMakeLists.txt
  - Message
  - Numerics
  - OhmmsApp
  - OhmmsData
  - OhmmsPETE
  - Utilities
  - Lattice
  - ParticleBase
  - Particle
  - ParticleIO
  - QMCWaveFunctions
  - QMCDrivers
  - Estimators
  - QMCApp
-->

\section ubuntubuild Installing QMCPACK on Ubuntu Linux 14
@note We assume that you are working in the qmcpack directory.

(Tested in a VirtualBox
VM in July 2014.) All the required packages are available in the
default repositories making for a quick installation. Note that for
convenience we use a generic BLAS. For production a platform optimized BLAS should be used.

\code
apt-get subversion cmake g++ openmpi-bin libopenmpi-dev libboost-dev
apt-get libatlas-base-dev liblapack-dev libhdf5-dev libxml2-dev fftw3-dev
export CXX=mpiCC
cd build
cmake ..
cmake ..
make -j8
ls -l bin/qmcapp
\endcode

For qmca and other tools
\code
sudo apt-get install python-numpy python-matplotlib
\endcode

To build the documentation you will also need to install graphviz and doxygen.

\section centosbuild Installing QMCPACK on CentOS Linux 7
@note We assume that you are working in the qmcpack directory.

(Tested in a Virtual Box VM in July 2014.) Currently this version of CentOS (Red Hat compatible) is using gcc 4.8.2. The installation is only complicated by the need to install another repository to obtain HDF5 packages. Note that for
convenience we use a generic BLAS. For production a platform optimized BLAS should be used.

\code
sudo yum install make cmake gcc gcc-c++ subversion openmpi  openmpi-devel fftw fftw-devel boost boost-devel libxml2 libxml2-devel
sudo yum install blas-devel lapack-devel atlas-devel
module load mpi 
\endcode

To setup repoforge as a source for the HDF5 package, go to http://repoforge.org/use . Install the appropriate up to date release package for your OS. By default the CentOS Firefox will offer to run the installer. The CentOS 6.5 settings were usable for HDF5 on CentOS 7 in July 2014, but use CentOS 7 versions when they become available.
\code
sudo yum install hdf5 hdf5-devel
\endcode

To build QMCPACK
\code
module load mpi/openmpi-x86_64
which mpirun
# Sanity check; should print something like   /usr/lib64/openmpi/bin/mpirun
export CXX=mpiCC
cd build
cmake ..
cmake ..
make -j8
ls -l bin/qmcapp
\endcode

To build the documentation you will also need to install graphviz and doxygen.

\section macbuild Installing QMCPACK on Mac OS X 10.9 Mavericks or 10.10 Yosemite using Macports
@note We assume that you are working in the qmcpack directory.
@warning This build will fail if the standalone einspline library is in /usr/local. Remove the einspline include files, archive libraries, and rerun cmake if this occurs.

(Tested on a 2013 Mac Pro and mid-2011 Mac Book Air in July 2014). 

These instructions assume a fresh installation of macports
and for consistency with current Linux distributions, use the gcc 4.8.2
compiler. It is vital to ensure matching compilers/options for all
packages and to force use of what is installed in /opt/local

For compatibility with Yosemite we switched to using the Accelerate framework instead of Veclib in October 2014.

Follow the Macports install instructions https://www.macports.org/install.php

- Install Xcode and the Xcode Command Line Tools
- Agree to Xcode license in Terminal: sudo xcodebuild -license
- Install MacPorts for your version of OS X


Install the required tools:

\code 
sudo port install gcc48
sudo port select gcc mp-gcc48  # Set default

sudo port install openmpi-devel-gcc48
sudo port select —set mpi openmpi-devel-gcc48-fortran  # Set default

# Sanity check
mpiCXX -v 
#should return … “gcc version 4.8.2 (MacPorts gcc48 4.8.2_2)” or similar.

sudo port install fftw-3 +gcc48
sudo port install cmake    # already cmake 3 as of 2014/7/29

sudo port install boost +gcc48
sudo port install libxml2
sudo port install hdf5-18 +gcc48

sudo port select —set python python27
sudo port install py27-matplotlib  # For qmca
\endcode

QMCPACK build:
\code
export CXX=mpiCXX
export CC=/opt/local/bin/gcc
export LIBXML2_HOME=/opt/local/
export HDF5_HOME=/opt/local
export LIBXML2_HOME=/opt/local
export BOOST_HOME=/opt/local
export FFTW_HOME=/opt/local
cd build
# Note: CMake correctly picks up Apple optimized veclib for blas.
cmake ..
cmake .. # twice
make -j6 # Adjust for available core count
\endcode

To build the documentation you will also need to install graphviz and doxygen.
\code
sudo port install graphviz doxygen
\endcode

*/
