/** \page n2msdP N2 using Multi-Slater-Determinant (MSD) trial wavefunction

\brief A tutorial for the expert users of GAMESS
\author Miguel A Morales
\date 2013 May 30

In this example, we consider a nitrogen dimer using BFD pseudopotentials.
Wavefunction files for QMCPACK are obtained using the "convert4qmc" program,
obtained in the standard distribution of QMCPACK. The use of the conversion
tool is describe below, it only needs the standard output files produced by
GAMESS. (Notice that we only describe the features relevant to GAMESS and MSD
wavefunctions)

\section qc2qmcS Using converter 

After the build is completed, the converter for Gaussian-base QC code can be found 
in the build directory:
\c bin/convert4qmc

The general usage of the converter and its features are described below:

\code
convert4qmc -gamessAscii GAMESS_OUTPUT_FILE  
\endcode

This is enough for RHF wfns. For non-RHF runs, the following options are accepted:
\code
-ci CI_GAMESS_OUTPUT
\endcode

This tag requests that a MSD wavefunction is read from CI_GAMESS_OUTPUT.
CI_GAMESS_OUTPUT is the standard output of a GAMESS run using CITYP={ALDET,
GUGA, ORMAS} (and also possibly MCSCF but that is not recommended). 

Orbitals can be obtained from 3 options, which are mutually exclusive:
<dl>
<dt>default</dt>
<dd>
  If no special tag is used (see -NaturalOrbitals and
  -readInitialGuess below), the code attempts to read canonical orbitals from
  the file GAMESS_OUTPUT_FILE. The type of orbitals read by default depend on
  the type of run. For RHF runs, the code reads "EIGENVECTORS", while for MCSCF
  runs the code reads "MCSCF OPTIMIZED ORBITALS" by default.  
</dd>
<li>
<dt> <c>-NaturalOrbitals NumToRead</c> </dt>
<dd>  Looks for natural orbitals in the standard
  output and reads them. In the case of ALDET or GUGA CI runs, the code looks
  for "NATURAL ORBITALS IN ATOMIC ORBITAL BASIS" in the output, in the case of
  MCSCF runs, the code looks for "MCSCF NATURAL ORBITALS". If these are not
  found in "GAMESS_OUTPUT_FILE", the code aborts. It reads only NumToRead
  states. 
</dd>
<dt> <c>-readInitialGuess NumToRead</c></dt>
<dd>This will read the initial guess printed
  by GAMESS with the option, "PRTMO=.T." in the $GUESS/$END block of the input
  file. The code aborts if the orbitals are not found.     
</dd>
</dl>

Other options:
<dl>
<dt> <c>-threshold cimin</c> </dt>
<dd> cutoff used to truncate the MSD expansion. Only terms in
  the expansion with a coefficient larger than cimin are read.
</dd>
<dt> <c>-zeroCI</c></dt>
<dd>Sets all the MSD expansion coefficients to zero in the QMCPACK xml file. 
</dd>
<dt><c>-orderByExcitation</c> </dt>
<dd> Orders the determinants or CSFs in the MSD
  expansion by number of excitations. By default, they are ordered by the
  magnitude of the expansion coefficient.
</dd>
</dl>

\section wfnsS Obtaining wavefunctions with various QC methods

Below I describe the procedure to obtain wfns for the following methods in
Gamess: RHF, MCSCF, and ORMAS, with both determinants and CSFs. I will assume
knowledge of Gamess and its features, focusing only on those details that are
needed for a proper wfn generation with convert4qmc. 

\subsection rhfS RHF 
This is the simplest case. The code only needs the output file of the run.
\code
rungms n2.hf.inp > n2.hf.out
convert4qmc -gamessAscii n2.hf.out
\endcode
Where a sample n2.hf.inp file would look like:

\code
 $CONTRL SCFTYP=RHF RUNTYP=ENERGY MULT=1
   ISPHER=1 EXETYP=RUN COORD=UNIQUE MAXIT=200 ECP=READ $END
 $SYSTEM MEMORY=350000000 MEMDDI=250 $END
 $GUESS  GUESS=HUCKEL $END
 $DATA
    ...  a data block including the basis set, or specify the basis set above
    with the appropriate input block  ... 
 $END
 $ECP
    ... an appropriate ECP block if desired. The converter will detect if an
    ECP was used.   ...
 $END
\endcode

This will produce the files needed for QMCPACK runs:
  - sample.Gaussian-G2.xml
  - sample.Gaussian-G2.ptcl.xml
 
\subsection advS Beyond RHF/UHF
 For wfns beyond RHF/UHF, the execution contains multiple steps due to the way
 GAMESS has been designed. The main steps are: 
\anchor qcout
 <ol>
  <li> perform RHF calculation to obtain a HF orbital set ($VEC/$END block).</li>
  <li> Perform correlated calculation starting from HF orbitals to obtain
  desired orbital set. This includes: MP2, MCSCF, ORMAS, etc. Notice that this
  step can be skipped if you are interested in a correlated wfn with HF
  orbitals. 
  </li>
  <li> Use the correlated orbital set obtained in ii. (the resulting $VEC/$END
  block) in a non SCF calculation of your choice. Since we are interested in
  multideterminant wavefunctions, any method that generates a multideterminant
  output is possible. Currently, the converter works for output produced by:
  CITYP=ORMAS, GUGA, and ALDET.  We recommend the use of "-readInitialGuess
  NNN", which requires "PRTMO=.T." in the $GUESS/$END block of the input file.
  </li>
  </ol>

While it is possible to read MCSCF orbitals directly, this is not recommended.
Instead, we recommend a final run using CITYP={ALDET,GUGA,ORMAS} and
SCFTYP=NONE, with a $VEC/$END block obtained from your favorite correlated
method.   

Assuming we have the desired $VEC/$END block, the following are examples of
runs for step 3. using GUGA.


<c>ci.guga.inp</c>: CISDTQ calculation using CSFs with the GUGA code, using 40 virtual
orbitals.  
\code
 $CONTRL SCFTYP=NONE CITYP=GUGA RUNTYP=ENERGY MULT=1
   ISPHER=1 EXETYP=RUN ECP=READ $END
 $SYSTEM MEMORY=500000000 MEMDDI=250 TIMLIM=10000 $END
 $GUESS  GUESS=MOREAD NORB=50 PUNMO=.T. PRTMO=.T. $END
 $CIDRT GROUP=D2h NFZC=0 NDOC=5 NALP=0 NVAL=40 NPRT=2
    ISTSYM=1 IEXCIT=4  MXNINT= 500000 $END
 $GUGDIA PRTTOL=0.001 CVGTOL=1.0E-6 ITERMX=100 $END
 $DATA
    ...  a data block including the basis set, or specify the basis set above
    with the appropriate input block  ...
 $END
 $ECP
    ... an appropriate ECP block if desired. The converter will detect if an
    ECP was used.
 $END
 $VEC
    ... some vec block ...
 $END 
*********************************** 
\endcode
  
The only 2 critical elements of the input file are:
  - NPRT=2 must be specified in the $CIDRT/$END block.
  - PRTMO=.T. must be specified in the $GUESS/$END block.

Everything else in principle can be modified for the specific calculation.
Similar examples can be made for CITYP={ALDET and ORMAS}, and the code will recognize the type of execution
and read the output appropriately. NPRT=2 must always be included when using CSFs.  
The conversion command would be (for example):

\code
rungms ci.guga.inp > ci.guga.out 
convert4qmc -gamessAscii ci.guga.out -ci ci.guga.out -threshold 0.001 -readInitialGuess 50 
\endcode

A few things are worth pointing out:
<ol>
  <li> Care must be taken to ensure consistency between CI expansions and orbital sets. This is particularly true in MCSCF calculations where GAMESS outputs the CI coefficients of the "last" iteration, which are not consistent with the printed orbitals. Another possible pitfall is the symmetrization of orbitals performed at the beggining of most runs by GAMESS. 
The safest way to obtain MSD wavefunctions from GAMESS is to do a final nonSCF calculation with the desired orbital set and read the orbitals using the "-readInitialGuess" option. 
  </li>
  <li> If you choose to read the orbitals from the output of step @ref qcout
  "2". (either by the default behavior of the converter or by using the tag
  "NaturalOrbitals"), you need to use the output of step @ref qcout "2". in
  GAMESS_OUTPUT_FILE, which is where all the information is read from (except
  CI/CSF expansions). The output of step @ref qcout "3" should only be used in
  "CI_GAMESS_OUTPUT", and only the CI/CSF coeficients are read from here.
  </li>
  <li> The code doesn't for UHF wavefunctions yet, and it might run into trouble if your molecule has symmetry inequivalent atoms of the same type. The code produces QMCPACK input files that have additional and unnecessary atomic basis sets. In this case, you can fix the problem by manually removing these additional basis sets from the xml sections in sample.Gaussian-G2.xml. Just remove all basis sets belonging to the same type of atom. (I will fix this soon in the converter)
  </li>
</ol>


I attached an example of a MSD wavefunction for the N2 dimer obtained from a CAS(10,13) calculation.  
Each input file contains the $VEC/$END block of the preceding step.

\code
rungms n2.hf.inp > n2.hf.out
rungms n2.casscf.inp > n2.casscf.out
rungms n2.ci.inp > n2.ci.out
convert4qmc -gamessAscii n2.ci.out -ci n2.ci.out -threshold 0.001 -readInitialGuess 13
\endcode

*/
