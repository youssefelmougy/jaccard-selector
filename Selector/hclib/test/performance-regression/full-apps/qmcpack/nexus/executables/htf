#! /usr/bin/env python

import os
import re
import sys
from optparse import OptionParser
from numpy import array
import subprocess



def error(msg,pad='  '):
    print '\nhtf error:\n'+pad+msg
    exit()
#end def error

class obj:
    None
#end def obj

class HTFBase:
    def log(self,msg,pad='  '):
        if self.verbose:
            print pad+msg
        #end if
    #end def log

    def error(self,msg,pad='  '):
        error(msg,pad)
    #end def error


    def execute(self,command):
        if self.dry_run:
            self.log('Would have executed\n    '+command)
            out,err = '',''
        else:
            self.log('Executing\n    '+command)
            process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
            out,err = process.communicate()
        #end if
        return out,err
    #end def execute

    @classmethod
    def read_command_line(cls):
        parser = OptionParser(usage='%prog [options] source dest')
        parser.add_option('-v','--verbose',dest='verbose',
                          action='store_true',default=False,
                          help='print extra information'
                          )
        parser.add_option('-p','--pbs_create',dest='pbs_create',
                          action='store_true',default=False,
                          help='create pbs files, do not copy files'
                          )
        parser.add_option('-d','--dirs_create',dest='dirs_create',
                          action='store_true',default=False,
                          help='create target directory structure, do not copy files'
                          )
        parser.add_option('-n','--dry_run',dest='dry_run',
                          action='store_true',default=False,
                          help='do a dry run, do not copy files'
                          )
        parser.add_option('-i','--interactive',dest='interactive',
                          action='store_true',default=False,
                          help='use htar through the shell, not via batch pbs'
                          )
        parser.add_option('-c','--chunk_size',dest='chunk_size',
                          default='20G',
                          help='target size of file aggregates bundled with htar\ndefault: %default'
                          )
        parser.add_option('-a','--account',dest='account',
                          default=None,
                          help='account for pbs job submission (used but not charged)'
                          )
        parser.add_option('-w','--walltime',dest='walltime',
                          default='8:00:00',
                          help='walltime for pbs job submission\ndefault: %default'
                          )
        parser.add_option('-e','--exclude',dest='exclude',
                          default=None,
                          help='pattern used to exclude files/directories from transfer'
                          )
        options,args = parser.parse_args()

        for key,value in options.__dict__.iteritems():
            cls.__dict__[key] = value
        #end for

        cls.transfer    = not cls.pbs_create and not cls.dirs_create
        cls.pbs_create  = (cls.pbs_create or cls.transfer)
        cls.dirs_create = cls.dirs_create or cls.transfer
        k=1024
        bytes = dict(k=k,m=k**2,g=k**3,t=k**4)
        byte_names = dict(k='KB',m='MB',g='GB',t='TB')
        try:
            size_key = cls.chunk_size[-1].lower()
            chunk    = float(cls.chunk_size[0:-1])
            chunk   *= bytes[size_key]
        except:
            error('invalid chunk_size, try something like 100M, 10G, or similar')
        #end try
        del k
        cls.chunk_file = 'htar_chunks.txt'
        cls.max_chunk_size = chunk
        cls.chunk_unit     = float(bytes[size_key])
        cls.chunk_unitname = byte_names[size_key]
        if cls.exclude!=None:
            cls.exclude = re.compile(cls.exclude)
        #end if

        if len(args)!=2:
            error('a source and destination must be provided')
        #end if
        cls.source,cls.dest = args

        source_local = os.path.exists(cls.source) #len(glob(source))>0
        dest_local   = os.path.exists(cls.dest)   #len(glob(dest))>0

        if source_local and not dest_local:
            cls.direction = 'to hpss'
            cls.transfer_dir = './transfer_to_hpss'
        elif dest_local and not source_local:
            cls.direction = 'from hpss'
            cls.transfer_dir = './transfer_from_hpss'
        else:
            error('source and dest must represent a transfer between local and hpss filesystems\n  source: {0}\n  dest: {1}\n  source is local: {2}\n  dest is local: {3}\n'.format(cls.source,cls.dest,source_local,dest_local))
        #end if

        return cls.direction
    #end def read_command_line

    @classmethod
    def welcome(cls):
        if cls.verbose:
            print '\nhtf:  (h)pss (t)rans(f)er'
            if cls.direction=='to hpss':
                print '  chunk size for htar files: {0} {1}'.format(cls.max_chunk_size/cls.chunk_unit,cls.chunk_unitname)
                print '  a record of files chunked into each htar will be written to:',cls.chunk_file
            #end if
            if cls.pbs_create:
                if cls.interactive:
                    print '  interactive htar file will be created in local directory: ',cls.transfer_dir
                else:
                    print '  pbs files will be created in local directory: ',cls.transfer_dir
                #end if
            #end if
            if cls.dirs_create:
                print '  target directories will be created'
            #end if
            if cls.transfer:
                if cls.interactive:
                    print '  htar via the shell will be used to transfer files '+cls.direction
                else:
                    print '  batch jobs on data transfer nodes will transfer files '+cls.direction
                #end if
            #end if
        #end if
    #end def welcome
#end class HTFBase





class LocalDirectory(HTFBase):
    pbs_template='''
#PBS -q dtn
#PBS -A {0}
#PBS -l nodes=1
#PBS -l walltime={1}

{2}
{3}
'''
    chunk_sizes = {}
    chunk_stats = obj()
    def __init__(self,path=None):
        if path is None:
            path = self.source
        #end if
        exclude = self.exclude
        base,name = os.path.split(path.rstrip('/'))
        self.name      = name
        self.path      = path
        self.abspath   = os.path.abspath(path)
        self.files     = {}
        self.dirs      = {}
        self.chunks    = {}
        self.subfile   = None
        contents = os.listdir(path)
        for name in contents:
            fullname = os.path.join(path,name)
            if os.path.isfile(fullname):
                self.files[name] = os.path.getsize(fullname)
            elif os.path.isdir(fullname) and (exclude==None or not exclude.match(name)):
                self.dirs[name]  = LocalDirectory(fullname)
            #end if
        #end for
    #end def __init__

    def tree(self,files=True):
        lines = self.tree_lines(files)
        t=''
        for line in lines:
            t+=line+'\n'
        #end for
        return t
    #end def tree

    def tree_lines(self,files=True,lines=[],n=0):
        pad = n*'  '
        lines.append(pad+self.name)
        if files:
            pad += '  '
            for file,size in self.files.iteritems():
                lines.append(pad+'{0:>12}  {1}'.format(size,file))
            #end for
        #end if
        for dname,dir in self.dirs.iteritems():
            dir.tree_lines(files,lines,n+1)
        #end for
        return lines
    #end def tree_lines

    def chunk(self,outfile=None):
        open_file = outfile is None
        cstats = LocalDirectory.chunk_stats
        if open_file: 
            transdir = self.transfer_dir
            if not os.path.exists(transdir):
                os.makedirs(transdir)
            #end if
            outfile = open(os.path.join(transdir,self.chunk_file),'w')
            cstats.nfiles   = 0
            cstats.ndirs    = 0
            cstats.nchunks  = 0
            cstats.minsize  = 1e99
            cstats.maxsize  = -1e99
            cstats.meansize = 0
        #end if
        if len(self.files)>0:
            cstats.ndirs += 1
            maxsize = self.max_chunk_size
            files = []
            sizes = []
            for file,size in self.files.iteritems():
                files.append(file)
                sizes.append(size)
            #end for
            sizes = array(sizes)
            order = sizes.argsort()[::-1]
            sizes = sizes[order]
            files = array(files)[order]
            chunk = []
            csize = 0
            for i in range(len(files)):
                size = sizes[i]
                if csize+size<maxsize or len(chunk)==0:
                    csize += size
                    chunk.append(files[i])
                else:
                    self.add_chunk(chunk,csize)
                    csize = 0
                    chunk = []
                #end if
            #end for
            if len(chunk)>0:
                self.add_chunk(chunk,csize)
            #end if
            if len(self.chunks)>0:
                outfile.write('\n'+self.path+'\n')
                indices = self.chunks.keys()
                indices.sort()
                for n in indices:
                    chunk = self.chunks[n]
                    outfile.write('  chunk_{0}.tar  {1:>4} files  {2:3.1f} {3}\n'.format(str(n).zfill(4),len(chunk),self.chunk_sizes[n]/self.chunk_unit,self.chunk_unitname))
                    #for file in chunk:
                    #    outfile.write('    {0}\n'.format(file))
                    ##end for
                #end for
            #end if
        #end if
        for dname,dir in self.dirs.iteritems():
            dir.chunk(outfile)
        #end for
        if open_file:
            outfile.close()
            cstats.meansize/=cstats.nchunks
            self.log('\nsorting files into htar chunks')
            self.log('{0} files in {1} dirs sorted into {2} chunks'.format(cstats.nfiles,cstats.ndirs,cstats.nchunks))
            self.log('min  chunk size: {0:3.1f} {1}'.format(cstats.minsize/ self.chunk_unit,self.chunk_unitname))
            self.log('max  chunk size: {0:3.1f} {1}'.format(cstats.maxsize/ self.chunk_unit,self.chunk_unitname))
            self.log('mean chunk size: {0:3.1f} {1}'.format(cstats.meansize/self.chunk_unit,self.chunk_unitname))
        #end if
    #end def chunk

    def add_chunk(self,chunk,csize):
        cs = LocalDirectory.chunk_stats
        ci = cs.nchunks
        self.chunks[ci] = chunk
        self.chunk_sizes[ci] = csize
        cs.nchunks  += 1
        cs.nfiles   += len(chunk)
        cs.minsize   = min(csize,cs.minsize)
        cs.maxsize   = max(csize,cs.maxsize)
        cs.meansize += csize
    #end def add_chunk

    def write_subfiles(self,infile=None):
        if not self.pbs_create:
            return
        #end if
        open_file = infile is None
        if open_file:
            transdir = self.transfer_dir
            if not os.path.exists(transdir):
                os.makedirs(transdir)
            #end if
            cwd = os.getcwd()
            os.chdir(transdir)
            if self.interactive:
                self.log('\nwriting interactive htar file')
                self.subfile   = 'interactive_htf.sh'
            else:
                self.log('\nwriting pbs htar file')
                self.subfile   = 'pbs_htf.sh'
                if self.account is None:
                    error('an account must be specified for pbs jobs (via -a)')
                #end if
            #end if
            infile = open(self.subfile,'w')
            infile.write('#! /bin/bash\n')
            self.log('submission file written at '+os.path.join(transdir,self.subfile))
        #end if
        if len(self.chunks)>0:
            tmp,ddir = os.path.split(self.source.rstrip('/'))
            rpath = os.path.relpath(self.path,self.source)
            dpath = os.path.join(ddir,rpath)
            indices = self.chunks.keys()
            indices.sort()
            enter = '\n\ncd '+self.abspath+'\n'
            if self.interactive:
                infile.write(enter)
            #end if
            for n in indices:
                ns = str(n).zfill(4)
                chunk_file = os.path.join(self.dest,dpath,'chunk_{0}.tar'.format(ns))
                command = '\nhtar -cvf '+chunk_file
                chunk = self.chunks[n]
                for file in chunk:
                    command += ' '+file
                #end for
                outfile = os.path.relpath('./chunk_{0}.out'.format(ns),self.abspath)
                command += ' >& '+outfile+'\n'
                if self.interactive:
                    infile.write(command)
                else:
                    pbs = self.pbs_template.format(self.account,
                                                   self.walltime,
                                                   enter,
                                                   command)
                    pbsfilename = 'chunk_{0}.pbs'.format(ns)
                    pbsfile = open(pbsfilename,'w')
                    pbsfile.write(pbs)
                    pbsfile.close()
                    infile.write('qsub '+pbsfilename+'\n')
                #end if
            #end for
        #end if
        for dname,dir in self.dirs.iteritems():
            dir.write_subfiles(infile)
        #end for
        if open_file:
            infile.close()
            os.system('chmod +x '+self.subfile)
            os.chdir(cwd)
        #end if
    #end def write_subfiles

    def create_directories(self,infile=None):
        if not self.dirs_create:
            return
        #end if
        open_file = infile is None
        if open_file:
            self.log('\nwriting target directory creation file')
            self.dir_file = os.path.join(self.transfer_dir,'dirs_create.sh')
            self.log('directory creation shell script written at '+self.dir_file)
            infile = open(self.dir_file,'w')
            infile.write('#! /bin/bash\n\n')
        #end if
        tmp,ddir = os.path.split(self.source.rstrip('/'))
        rpath = os.path.relpath(self.path,self.source)
        dpath = os.path.join(self.dest,ddir,rpath).rstrip('./')
        infile.write('hsi mkdir '+dpath+'\n')
        for dname,dir in self.dirs.iteritems():
            dir.create_directories(infile)
        #end for
        if open_file:
            infile.close()
            os.system('chmod +x '+self.dir_file)
            #self.execute(self.dir_file)
        #end if
    #end def create_directories

    def transfer_to_hpss(self):
        if not self.transfer:
            return
        #end if
    #end def transfer_to_hpss
#end class LocalDirectory







#htf ./U_3.5 /proj/mat044/


if __name__=='__main__':

    direction = HTFBase.read_command_line()

    HTFBase.welcome()

    if direction=='to hpss':
        # walk the local directory tree and bunch files into chunks
        src = LocalDirectory()
        src.chunk()
        # write pbs files or interactive htar file
        src.write_subfiles()
        # create target directories
        src.create_directories()
        # transfer the files to hpss
        src.transfer_to_hpss()
    #end if

    if direction=='from hpss':
        error('file transfers from hpss have not yet been implemented')
    #end if

    print
#end if

